#!/bin/bash

# Script de d√©ploiement Vue.js via SSH
# Usage: ./deploy.sh [environnement]

set -e  # Arr√™ter le script en cas d'erreur

# Configuration par d√©faut (modifiez selon vos besoins)
DEFAULT_ENV="production"
ENV=${1:-$DEFAULT_ENV}

# Chargement de la configuration d'environnement

SERVER_HOST="46.101.209.51"
SERVER_USER="root"
SERVER_PATH="/var/www/adopteunsport"
BUILD_COMMAND="npm run build"
DIST_FOLDER="dist"

# Variables
PROJECT_NAME=$(basename $(pwd))
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
BACKUP_PATH="$SERVER_PATH/backups"
TEMP_PATH="/tmp/deploy_$PROJECT_NAME_$TIMESTAMP"

echo "üöÄ D√©ploiement de $PROJECT_NAME vers $ENV"
echo "üìç Serveur: $SERVER_USER@$SERVER_HOST:$SERVER_PATH"
echo ""

# V√©rifications pr√©alables
echo "üîç V√©rifications pr√©alables..."

# V√©rifier que nous sommes dans un projet Vue.js
if [ ! -f "package.json" ]; then
    echo "‚ùå package.json non trouv√©. √ätes-vous dans le bon r√©pertoire ?"
    exit 1
fi

# V√©rifier la connectivit√© SSH
if ! ssh -o ConnectTimeout=5 $SERVER_USER@$SERVER_HOST "echo 'Connexion SSH OK'" > /dev/null 2>&1; then
    echo "‚ùå Impossible de se connecter au serveur via SSH"
    echo "V√©rifiez votre configuration SSH et que le serveur est accessible"
    exit 1
fi

# Afficher la branche et le commit actuel
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
CURRENT_COMMIT=$(git rev-parse --short HEAD)
echo "üìÇ Branche: $CURRENT_BRANCH"
echo "üìù Commit: $CURRENT_COMMIT"

# Confirmation
# echo ""
# read -p "ü§î Confirmer le d√©ploiement vers $ENV ? (y/N): " -n 1 -r
# echo
# if [[ ! $REPLY =~ ^[Yy]$ ]]; then
#     echo "‚ùå D√©ploiement annul√©"
#     exit 1
# fi

echo ""
echo "‚è≥ D√©but du d√©ploiement..."

# 1. Installation des d√©pendances
echo "üì¶ Installation des d√©pendances..."
npm ci

# 2. Build de l'application
echo "üî® Build de l'application..."
$BUILD_COMMAND

# V√©rifier que le build a bien cr√©√© le dossier dist
if [ ! -d "$DIST_FOLDER" ]; then
    echo "‚ùå Le dossier $DIST_FOLDER n'a pas √©t√© cr√©√© par le build"
    exit 1
fi

# 3. Cr√©ation d'une sauvegarde sur le serveur
echo "üíæ Cr√©ation d'une sauvegarde sur le serveur..."
ssh $SERVER_USER@$SERVER_HOST "
    mkdir -p $BACKUP_PATH
    if [ -d '$SERVER_PATH/current' ]; then
        mv '$SERVER_PATH/current' '$BACKUP_PATH/backup_$TIMESTAMP'
        echo '‚úÖ Sauvegarde cr√©√©e: $BACKUP_PATH/backup_$TIMESTAMP'
    fi
    
    # Nettoyage des anciennes sauvegardes (garde les 5 derni√®res)
    cd $BACKUP_PATH && ls -t | tail -n +6 | xargs -r rm -rf
"

# 4. Pr√©paration du dossier temporaire sur le serveur
echo "üìÅ Pr√©paration du serveur..."
ssh $SERVER_USER@$SERVER_HOST "
    mkdir -p $TEMP_PATH
    mkdir -p $SERVER_PATH
"

# 5. Upload des fichiers
echo "üì§ Upload des fichiers..."
rsync -avz --delete \
    --exclude='node_modules' \
    --exclude='.git' \
    --exclude='.env.local' \
    --exclude='*.log' \
    $DIST_FOLDER/ $SERVER_USER@$SERVER_HOST:$TEMP_PATH/

# 6. Activation de la nouvelle version
echo "üîÑ Activation de la nouvelle version..."
ssh $SERVER_USER@$SERVER_HOST "
    # D√©placement atomique pour √©viter les coupures
    mv '$TEMP_PATH' '$SERVER_PATH/current'
    
    # V√©rification des permissions
    sudo chown -R www-data:www-data '$SERVER_PATH/current'
    sudo chmod -R 755 '$SERVER_PATH/current'
    
    # Test de la configuration Nginx
    sudo nginx -t
    
    # Rechargement de Nginx
    sudo systemctl reload nginx
    
    echo '‚úÖ Nouvelle version activ√©e'
"

# 7. V√©rification de sant√©
echo "üè• V√©rification de sant√©..."
sleep 2

# Test HTTP simple
HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://$SERVER_HOST/ || echo "000")
if [ "$HTTP_STATUS" = "200" ]; then
    echo "‚úÖ Site accessible (HTTP 200)"
else
    echo "‚ö†Ô∏è  Site retourne HTTP $HTTP_STATUS"
fi

# 8. Nettoyage
echo "üßπ Nettoyage..."
rm -rf $DIST_FOLDER

# 9. Log du d√©ploiement
echo "üìù Enregistrement du d√©ploiement..."
ssh $SERVER_USER@$SERVER_HOST "
    echo '$TIMESTAMP - D√©ploiement $ENV - Branche: $CURRENT_BRANCH - Commit: $CURRENT_COMMIT' >> $SERVER_PATH/deploy.log
"

echo ""
echo "üéâ D√©ploiement termin√© avec succ√®s !"
echo ""
echo "üìä R√©sum√©:"
echo "   ‚Ä¢ Environnement: $ENV"
echo "   ‚Ä¢ Branche: $CURRENT_BRANCH"
echo "   ‚Ä¢ Commit: $CURRENT_COMMIT"
echo "   ‚Ä¢ Timestamp: $TIMESTAMP"
echo ""
echo "üîó Votre site: http://$SERVER_HOST"
echo ""
echo "üõ†Ô∏è En cas de probl√®me:"
echo "   ‚Ä¢ Rollback: ssh $SERVER_USER@$SERVER_HOST 'mv $SERVER_PATH/current $SERVER_PATH/failed_$TIMESTAMP && mv $BACKUP_PATH/backup_$TIMESTAMP $SERVER_PATH/current && sudo systemctl reload nginx'"
echo "   ‚Ä¢ Logs Nginx: ssh $SERVER_USER@$SERVER_HOST 'sudo tail -f /var/log/nginx/error.log'"
echo "   ‚Ä¢ Logs d√©ploiement: ssh $SERVER_USER@$SERVER_HOST 'tail -f $SERVER_PATH/deploy.log'"